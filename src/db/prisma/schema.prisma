generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentCategory {
  SERIES
  MOVIE
}

model Content {
  id       Int             @id @default(autoincrement())
  category ContentCategory

  // relación exclusiva: o apunta a una serie o a una película
  seriesId Int?    @unique
  movieId  Int?    @unique
  series   Series? @relation(fields: [seriesId], references: [id])
  movie    Movie?  @relation(fields: [movieId], references: [id])

  name               String
  posterUrl          String?
  rating             Decimal?  @db.Decimal(3, 1)
  originalLanguageId Int?
  originalLanguage   Language? @relation(fields: [originalLanguageId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  ratings            Rating[]

  @@index([category])
}

model Language {
  id       Int       @id @default(autoincrement())
  code     String    @unique // ej: "es", "en"
  name     String    // ej: "Español"
  movies   Movie[]
  series   Series[]
  contents Content[]
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  series Series[] @relation("SeriesGenres")
  movies Movie[]  @relation("MovieGenres")
}

model Series {
  id                 Int       @id @default(autoincrement())
  name               String    @unique
  startYear          Int
  endYear            Int?
  description        String
  director           String?
  protagonists       String[]  // lista de protagonistas
  comentarioBM       String?   // opinión personal opcional
  totalSeasons       Int?    // cantidad total de temporadas
  totalEpisodes      Int?     // cantidad total de episodios
  originalLanguageId Int
  originalLanguage   Language  @relation(fields: [originalLanguageId], references: [id])
  posterUrl          String?
  rating             Decimal?  @db.Decimal(3, 1)
  seasons            Season[]
  content            Content?
  genres             Genre[]   @relation("SeriesGenres")

  @@index([name])
}

model Season {
  id            Int      @id @default(autoincrement())
  seriesId      Int
  number        Int      // nro de temporada
  episodesCount Int      // cantidad de episodios en la temporada
  year          Int?     // opcional (ej: año de estreno)
  series        Series   @relation(fields: [seriesId], references: [id])
  episodes      Episode[]

  @@unique([seriesId, number])
}

model Episode {
  id       Int     @id @default(autoincrement())
  seasonId Int
  number   Int      // número de episodio dentro de la temporada
  name     String   // nombre del capítulo
  season   Season   @relation(fields: [seasonId], references: [id])

  @@unique([seasonId, number]) // evita duplicar episodio en una misma temporada
}

model Movie {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  releaseYear        Int      // año de estreno
  description        String
  director           String?
  protagonists       String[]
  comentarioBM       String?
  originalLanguageId Int
  originalLanguage   Language @relation(fields: [originalLanguageId], references: [id])
  posterUrl          String?  // imagen
  rating             Decimal? @db.Decimal(3, 1) // puntaje
  content            Content?
  genres             Genre[]   @relation("MovieGenres")

  @@index([name])
}

model Rating {
  id        Int     @id @default(autoincrement())
  contentId Int
  clientId  String  // ID anónimo (cookie)
  score     Decimal @db.Decimal(3, 1)

  content Content @relation(fields: [contentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contentId, clientId]) // 1 voto por visitante y contenido
  @@index([contentId])
}
